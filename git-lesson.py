# THEORY - PLATFORM

# Git - Version Control System
# Это распределенная система контроля версий (СКВ), записывающая изменения в файл или набор файлов в течение времени
# Это хранитель версий файлов(кода)

# Локальные
# Централизованные
# Распределенные

# Локальная - Система с простой базой данных, которая хранит версии файлов

# Централизованная - единый сервер - централизованное хранилище, куда имеют доступ разные клиенты
# Недостаток - единая точка отказа - если сервер выйдет из строя, то никто не сможет вносить изменения (т.е. использовать СКВ для сохранения изменения), а также обмениваться изменениями. Можно потерять всю историю проекта

# Распределенная СКВ (git) - клиенты не просто скачивают изменения, они полностью копируют репозиторий. В случае неполадок серверов, можно получить изменения из ранее скопированного клиентского репозитория. Каждая копия репозитория - является полным бэкапом всех данных

# 3 состояния гита:

# Зафиксированное (committed) - файл сохранен в моей локальной базе
# Измененное (modified) - измененные файлы, но еще не зафиксированные
# Подготовленное (staged) -  измененные файлы, отмеченные для включения в следующий коммит

# 3 секции проекта гит:
# .git directory (Repository) - место, где гит хранит метаданные и базу объектов проекта. Копируется путем клонирования репозитория с другого компьютера

# staging area - область подготовленных файлов(индекс), файл изменений т.е. файл, располагающийся в гит-директории. в этом файле хранится инфо о том, какие изменения попадут в следующий коммит.

# working directory - рабочая директория (снимок версии проекта) файлы распаковываются из сжатой базы данных и располагаются на диске компьютера для использования и внесения изменений

# Git - СВК
# Github - онлайн сервис для хранения репозиторий и онлайн-доступа
# Gitlab, Gitpy


# PRACTICE - PLATFORM

# 2 варианта клонирования:
# HTTPS - будет запрашивать юзернейм и пароль
# SSH - не будет запрашивать, т.к. комп будет привязан к данному аккаунту

# linux command for key generation
# ssh-keygen -t rsa - b 4096 -C "ataikasymbekov@gmail.com"

# Инициализация проекта, т.е. при вызове команды создается особая папка git - скрытая папка, где содержатся все файлы нашего репозитория
# git init - .git
# git remote add name url - вместо name url мы помещаем либо https либо ssh ссылку. Команда добавляет удаленный (not deleted, but remote) репозиторий, который находится на сервере
# git pull - стягиваем изменения с какой-либо ветки. Мы будем использовать git pull origin master - т.е. хотим стянуть все изменения с ветки master
# git status - показывает статус файлов проекта, какие изменены, какие не добавлены в stagin arrea (или в index), а какие ожидают комита
# git add - добавляет файлы в рабочей папке в staging arrea(index) для дальнейшего комита
# git add name file - добавит в индекс только названный файл
# git add . - добавит все файлы
# git commit - добавит все файлы в индексе во внутреннюю базу данных и сохраняет слепок (т.е. их состояние) на данный момент и сдвигает указатель текущей ветки на этот слепок
# git commit -m "comment" - комментарий описывает наш комит для удобства
# git branch - менеджер веток. Можно посмотреть список веток и выбрать необходимую ветку
# git branch name branch - создает новую названную ветку 
# git checkout name branch - переключает на названную ветку
# git push name branch - отправляет файл на удаленный репозиторий 
# git push origin master - в первое время будем использовать свой удаленный репозиторий
# git reset filename - удаляет файл из staging arrea (index)








